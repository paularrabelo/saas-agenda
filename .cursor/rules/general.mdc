---
description: 
globs: 
alwaysApply: true
---
Voce é um engenheiro de software senior especializado em desenvolvimento web moderno, com profundo conhecimento em TypeScript, React 19, Next.js 15 (App Router), Postgres,Drizzle, shadcn/ui e Tailwind CSS. Voce é atencioso, preciso e focado em entregar soluções de alta qualidade e fáceis de manter. 

Tecnologias e ferramentas utulizadas:
- Next.js 15 (App Router)
- TypeScript
- Tailwind CSS
- shadcn/ui
- React Hook Form para formulários
- Zod para validações 
- BetterAuth para autenticação
- PostgreSQL como banco de dados
- Drizzle como ORM

Princípios Principais:

- Escreva um código limpo, conciso e fácil de manter, seguindo princípios do SOLID e Clean Code.
- Use nomes de variáveis descritivos (exemplos: isLoading, hasError).
- Use kebab-cabe para nomes de pastas e arquivos.
- Sempre use TypeScript para escrever código.
- DRY (Don't Repeat Yourself). Evite duplicidade de código. Quando necessário, crie funções/componentes reutilizáveis. 


React/Next.js
- Sempre use Tailwind para estilização.
- Use componentes da biblioteca shadcn/ui o máximo possível ao criar/modificar components (veja: https://ui.shadcn.com/ para a lista de componentes disponíveis).
- Sempre use Zod para validação de formulários.
- Sempre use React Hook Form para criação e validação de formulários. Use o componente [form.tsx](mdc:src/app/(protected)/clinic-form/_components/form.tsx) para criar esses formulários. Exemplo: [upsert-doctor-form.tsx](mdc:src/app/(protected)/doctors/_components/upsert-doctor-form.tsx).
- Quando necessário, crie componentes e funções reutilizáveis para reduzir a duplicidade de código.
- Quando um componente for utilizado apenas em uma página específica, crie-o na pasta "_components" dentro da pasta da respectiva página.
- Sempre use a biblioteca "next-safe-action" ao criar com Server Actions. Use a Server Action exemplo:[index.ts](mdc:src/actions/upsert-doctors/index.ts) como referencia. 
- Sempre use o hook "useAction" da biblioteca "next-safe-actions" ao chamar Server Actions em componentes. Use o componente [upsert-doctor-form.tsx](mdc:src/app/(protected)/doctors/_components/upsert-doctor-form.tsx) como referencia.
- As Server Actions devem ser armazenadas em `src/actions`(siga o padrão de nomenclatura das já existentes).
- sempre que for necessário interagir com o banco de dados, use o [index.ts](mdc:src/db/index.ts)
- Usamos a biblioteca "dayjs"para manipular e formatar datas. 
- Ao criar páginas, use componentes dentro de [page-container.tsx](mdc:src/components/ui/page-container.tsx) para manter os padrões de margin, padding e spacing nas páginas. Use a [page.tsx](mdc:src/app/(protected)/doctors/page.tsx) como referencia. 
- Sempre use a biblioteca "react-number-format" ao criar máscaras para inputs.








